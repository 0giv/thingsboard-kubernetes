apiVersion: apps/v1
kind: Deployment
metadata:
  name: tb-js-executor
  namespace: thingsboard
spec:
  replicas: 3
  selector:
    matchLabels:
      app: tb-js-executor
  template:
    metadata:
      labels:
        app: tb-js-executor
    spec:
      containers:
      - name: server
        imagePullPolicy: Always
        image: thingsboard/tb-js-executor:3.9.0
        resources:
          limits:
            cpu: 250m
            memory: 200Mi
          requests:
            cpu: 250m
            memory: 200Mi
        env:
        - name: REMOTE_JS_EVAL_REQUEST_TOPIC
          value: "js_eval.requests"
        - name: LOGGER_LEVEL
          value: "info"
        - name: LOG_FOLDER
          value: "logs"
        - name: LOGGER_FILENAME
          value: "tb-js-executor-%DATE%.log"
        - name: DOCKER_MODE
          value: "true"
        - name: SCRIPT_BODY_TRACE_FREQUENCY
          value: "1000"
        - name: NODE_OPTIONS
          value: "--max-old-space-size=200"
        envFrom:
          - configMapRef:
              name: tb-kafka-config
      restartPolicy: Always
---
apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: tb-mqtt-transport
  namespace: thingsboard
spec:
  replicas: 1
  selector:
    matchLabels:
      app: tb-mqtt-transport
  template:
    metadata:
      labels:
        app: tb-mqtt-transport
    spec:
      volumes:
        - name: tb-mqtt-transport-config
          configMap:
            name: tb-mqtt-transport-config
            items:
            - key: conf
              path: tb-mqtt-transport.conf
            - key: logback
              path: logback.xml
        - name: mqtt-secret-tls
          secret:
            secretName: mqtt-secret-tls
        - name: logs
          persistentVolumeClaim:
            claimName: tb-mqtt-transport-logs
      containers:
      - name: server
        imagePullPolicy: Always
        image: thingsboard/tb-mqtt-transport:3.9.0
        ports:
        - containerPort: 8883
          name: mqtt
        env:
        - name: TB_SERVICE_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: MQTT_BIND_ADDRESS
          value: "0.0.0.0"
        - name: MQTT_BIND_PORT
          value: "8883"
        - name: MQTT_TIMEOUT
          value: "10000"
        envFrom:
          - configMapRef:
              name: tb-cache-config
          - configMapRef:
              name: tb-kafka-config
        volumeMounts:
          - mountPath: /config
            name: tb-mqtt-transport-config
          - mountPath: /logs
            name: logs
          - mountPath: /etc/thingsboard/ssl
            name: mqtt-secret-tls

        readinessProbe:
          periodSeconds: 20
          tcpSocket:
            port: 8883
        livenessProbe:
          initialDelaySeconds: 120
          periodSeconds: 20
          tcpSocket:
            port: 8883
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: tb-mqtt-transport-logs
spec:
  capacity:
    storage: 200Mi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  storageClassName: manual
  hostPath:
    path: /mnt/data/tb-mqtt-transport/logs
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: tb-mqtt-transport-logs
  namespace: thingsboard
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: manual
  resources:
    requests:
      storage: 200Mi
---
apiVersion: v1
kind: Service
metadata:
  name: tb-mqtt-transport
  namespace: thingsboard
spec:
  type: ClusterIP
  selector:
    app: tb-mqtt-transport
  ports:
  - port: 8883
    name: mqtt

---
apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: tb-http-transport
  namespace: thingsboard
spec:
  replicas: 1
  selector:
    matchLabels:
      app: tb-http-transport
  template:
    metadata:
      labels:
        app: tb-http-transport
    spec:
      volumes:
        - name: tb-http-transport-config
          configMap:
            name: tb-http-transport-config
            items:
            - key: conf
              path: tb-http-transport.conf
            - key: logback
              path: logback.xml
        - name: logs
          persistentVolumeClaim:
            claimName: tb-http-transport-logs
      containers:
      - name: server
        imagePullPolicy: Always
        image: thingsboard/tb-http-transport:3.9.0
        ports:
        - containerPort: 8080
          name: http
        env:
        - name: TB_SERVICE_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: HTTP_BIND_ADDRESS
          value: "0.0.0.0"
        - name: HTTP_BIND_PORT
          value: "8080"
        - name: HTTP_REQUEST_TIMEOUT
          value: "60000"
        envFrom:
          - configMapRef:
              name: tb-cache-config
          - configMapRef:
              name: tb-kafka-config
        volumeMounts:
          - mountPath: /config
            name: tb-http-transport-config
          - mountPath: /logs
            name: logs
        readinessProbe:
          periodSeconds: 20
          tcpSocket:
            port: 8080
        livenessProbe:
          initialDelaySeconds: 120
          periodSeconds: 20
          tcpSocket:
            port: 8080
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: tb-http-transport-logs
spec:
  capacity:
    storage: 200Mi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  storageClassName: manual
  hostPath:
    path: /mnt/data/tb-http-transport/logs
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: tb-http-transport-logs
  namespace: thingsboard
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: manual
  resources:
    requests:
      storage: 200Mi
---
apiVersion: v1
kind: Service
metadata:
  name: tb-http-transport
  namespace: thingsboard
spec:
  type: ClusterIP
  selector:
    app: tb-http-transport
  ports:
  - port: 8080
    name: http
---
apiVersion: apps/v1
kind: ReplicaSet
metadata:
  name: tb-coap-transport
  namespace: thingsboard
spec:
  replicas: 1
  selector:
    matchLabels:
      app: tb-coap-transport
  template:
    metadata:
      labels:
        app: tb-coap-transport
    spec:
      volumes:
        - name: tb-coap-transport-config
          configMap:
            name: tb-coap-transport-config
            items:
            - key: conf
              path: tb-coap-transport.conf
            - key: logback
              path: logback.xml
        - name: logs
          persistentVolumeClaim:
            claimName: tb-coap-transport-logs
      containers:
      - name: server
        imagePullPolicy: Always
        image: thingsboard/tb-coap-transport:3.9.0
        ports:
        - containerPort: 5683
          name: coap
          protocol: UDP
        env:
        - name: TB_SERVICE_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: COAP_BIND_ADDRESS
          value: "0.0.0.0"
        - name: COAP_BIND_PORT
          value: "5683"
        - name: COAP_TIMEOUT
          value: "10000"
        envFrom:
          - configMapRef:
              name: tb-cache-config
          - configMapRef:
              name: tb-kafka-config
        volumeMounts:
          - mountPath: /config
            name: tb-coap-transport-config
          - mountPath: /logs
            name: logs
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: tb-coap-transport-logs
spec:
  capacity:
    storage: 200Mi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  storageClassName: manual
  hostPath:
    path: /mnt/data/tb-coap-transport/logs
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: tb-coap-transport-logs
  namespace: thingsboard
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: manual
  resources:
    requests:
      storage: 200Mi
---
apiVersion: v1
kind: Service
metadata:
  name: tb-coap-transport
  namespace: thingsboard
spec:
  type: LoadBalancer
  selector:
    app: tb-coap-transport
  ports:
  - port: 5683
    name: coap
    protocol: UDP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tb-web-ui
  namespace: thingsboard
spec:
  replicas: 1
  selector:
    matchLabels:
      app: tb-web-ui
  template:
    metadata:
      labels:
        app: tb-web-ui
    spec:
      containers:
      - name: server
        imagePullPolicy: Always
        image: thingsboard/tb-web-ui:3.9.0
        ports:
        - containerPort: 8080
          name: http
        env:
        - name: HTTP_BIND_ADDRESS
          value: "0.0.0.0"
        - name: HTTP_BIND_PORT
          value: "8080"
        - name: TB_ENABLE_PROXY
          value: "false"
        - name: LOGGER_LEVEL
          value: "info"
        - name: LOG_FOLDER
          value: "logs"
        - name: LOGGER_FILENAME
          value: "tb-web-ui-%DATE%.log"
        - name: NODE_OPTIONS
          value: "--max-old-space-size=100"
        - name: DOCKER_MODE
          value: "true"
        livenessProbe:
          httpGet:
            path: /index.html
            port: http
          initialDelaySeconds: 120
          timeoutSeconds: 10
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: tb-web-ui
  namespace: thingsboard
spec:
  type: ClusterIP
  selector:
    app: tb-web-ui
  ports:
  - port: 8080
    name: http
---